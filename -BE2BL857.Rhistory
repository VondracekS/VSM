pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5)
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_histogram(alpha = 0.5))
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_histogram(alpha = 0.5)
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5)
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin")
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek")
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti")
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
lab(colors = "Obor")
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
labs(colors = "Obor")
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
labs(fill = "Obor")
summary(data_stud)
?summary
var(data_stud)
var(data_stud, na.rm=FALSE)
var(data_stud, na.rm=TRUE)
sd(data_stud, na.rm=TRUE)
typeof(data_stud)
tibble(data_stud)
#  data
data_stud <- tibble(read_csv("./data.csv"))
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
labs(fill = "Obor")
summary(data_stud)
sd(data_stud, na.rm=TRUE)
sd(data_stud)
#  data
data_stud <- as_tibble(read_csv("./data.csv"))
data_stud
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
labs(fill = "Obor")
summary(data_stud)
sd(data_stud)
summary(data_stud)
data_frame(data_stud)
data_stud
map(data_stud, ~sd())
map(data_stud, ~sd(.))
map(data_stud, ~sd(., na.rm=TRUE))
map(data_stud, ~var(., na.rm=TRUE))
map_df(data_stud, ~var(., na.rm=TRUE))
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept=mean(.))
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
labs(fill = "Obor")
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_boxplot()
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(y = value, fill=name)) +
geom_boxplot()
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(y = value, x=name)) +
geom_boxplot()
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(y = value, x=name, color=name)) +
geom_boxplot()
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(y = value, x=name, fill=name)) +
geom_boxplot()
Rovněž boxplot, nikoliv překvapivě, podporuje naše zjištění.
## Neparametrické testy
wilcox.test(data_stud$m_eng, data_stud$energ)
wilcox.test(data_stud$m_eng, data_stud$energ, alternative="two_sided")
wilcox.test(data_stud$m_eng, data_stud$energ, alternative="two.sided")
qqnorm(data_stud)
qqnorm(data_stud$m_eng, data_stud$energ)
---
title: "Neparametricke testy"
author: "S Vondracek"
date: "`r Sys.Date()`"
output: word_document
---
```{r echo=FALSE}
#  imports
data <- read_csv()
```
Cílem tohoto projektu je pomocí vhodného neparametrického testu ověřit, zda je
bakalářský obor Energetika obtížnější, než obor Strojní inženýrství.
Testování bude probíhat poměrně jednoduchým způsobem, který jsem aplikoval
zejména peo účely tohoto úkolu, a nelze je tedy zobecnit.
Naše hypotéza stojí na předpokladu, že oba obory navštěvují studenti se stejnými
předpoklady pro skládání zkoušek. Porovnáním známek v obou skupinách tak můžeme
zodpovědět výzkumnou otázku, zda se známky napříč obory liší.
```{r}
#  data
data_stud <- as_tibble(read_csv("./data.csv"))
data_stud
```
```{r}
summary(data_stud)
```
```{r}
map_df(data_stud, ~var(., na.rm=TRUE))
```
Vidíme, že studenti Energetiky mají větší variabilitu co se týče známek
```{r}
data_stud()
```
```{r}
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
labs(fill = "Obor")
```
Pro porovnání obou skupin studentů bude vhodné vykrelit jejich jádrovou hustotu.
Vidíme, že obor energetika se vyznačuje tím, že studenti mají variabilnější
průměr svých známek.
```{r}
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(y = value, x=name, fill=name)) +
geom_boxplot()
```
Rovněž boxplot, nikoliv překvapivě, podporuje naše zjištění.
## Neparametrické testy
```{r}
wilcox.test(data_stud$m_eng, data_stud$energ, alternative="two.sided")
```
#  imports
data <- read_csv()
Cílem tohoto projektu je pomocí vhodného neparametrického testu ověřit, zda je
bakalářský obor Energetika obtížnější, než obor Strojní inženýrství.
Testování bude probíhat poměrně jednoduchým způsobem, který jsem aplikoval
zejména peo účely tohoto úkolu, a nelze je tedy zobecnit.
Naše hypotéza stojí na předpokladu, že oba obory navštěvují studenti se stejnými
předpoklady pro skládání zkoušek. Porovnáním známek v obou skupinách tak můžeme
zodpovědět výzkumnou otázku, zda se známky napříč obory liší.
```{r}
#  data
data_stud <- as_tibble(read_csv("./data.csv"))
#  data
data_stud <- as_tibble(read_csv("./data.csv"))
data_stud
summary(data_stud)
map_df(data_stud, ~var(., na.rm=TRUE))
data_stud()
#  data
data_stud <- as_tibble(read_csv("./data.csv"))
data_stud
summary(data_stud)
map_df(data_stud, ~var(., na.rm=TRUE))
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(x = value, fill=name)) +
geom_density(alpha = 0.5) +
ggtitle("Jádrová hustota obou skupin") +
scale_x_continuous("Průměr známek") +
scale_y_continuous("Hustota pravděpodobnosti") +
labs(fill = "Obor")
data_stud %>%
mutate(id = 1:nrow(data_stud)) %>%
pivot_longer(cols = -id) %>%
ggplot(data = .,
aes(y = value, x=name, fill=name)) +
geom_boxplot()
wilcox.test(data_stud$m_eng, data_stud$energ, alternative="two.sided")
library(tidyverse)
data_stud %>% sapply(., round(2))
data_stud %>% sapply(., round(., 2))
data_stud %>% map_df(~round(., 2))
```{r}
#  data
data_stud <- as_tibble(read_csv("./data.csv")) %>% map_df(~round(., 2))
data_stud
# Load a convert the RDATA
library(tidyverse)
setwd("C:/Users/A200083283/OneDrive - Deutsche Telekom AG/non_DT/uni/WS_22/VSM")
rm(list=ls())
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
convert_to_csv <- function(dataset, path_out){
data_out <- loadRData(dataset)
write.csv(data_out, paste0(path_out, '.csv'), row.names=TRUE)
data_out <- read_csv(paste0(path_out, '.csv'))
return(data_out)
}
juice <- convert_to_csv("./Data/Juice.RData", 'juice')
install.packages("quantmod")
library(quantmod)
getSymbols("AAPL", src='yahoo', from="01-01-2013")
curl::curl()
Sys.setenv(http_proxy = "http://10.246.170.130:3128")
Sys.setenv(https_proxy = "http://10.246.170.130:3128")
getSymbols("AAPL", src='yahoo', from="01-01-2013")
Sys.setenv(http_proxy = "http://10.246.170.130:3128")
Sys.setenv(https_proxy = "http://10.246.170.130:3128")
install.packages("mFilter")
install.packages("tseries")
install.packages("lmtest")
install.packages("forecast")
install.packages("fGarch")
install.packages("aTSA")
library(aTSA)
library(tidyverse)
library(quantmod)
library(mFilter)
library(tseries)
library(lmtest)
library(forecast)
library(fGarch)
library(aTSA)
library(tidyverse)
library(quantmod)
library(mFilter)
library(tseries)
library(lmtest)
library(forecast)
library(fGarch)
library(aTSA)
library(quantmod)
library(mFilter)
library(tseries)
library(lmtest)
library(forecast)
library(fGarch)
library(aTSA)
library(quantmod)
library(mFilter)
library(tseries)
library(lmtest)
library(forecast)
library(fGarch)
library(aTSA)
Sys.setenv(http_proxy = "http://10.246.170.130:3128")
Sys.setenv(https_proxy = "http://10.246.170.130:3128")
#GET DATA
getSymbols("MDLZ", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
getSymbols("^GSPC", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
#GET DATA
getSymbols("MDLZ", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
getSymbols("^GSPC", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
MDLZ = MDLZ$MDLZ.Adjusted
GSPC = GSPC$GSPC.Adjusted
#RETURNS
lnMDLZ = log(MDLZ)
lnGSPC = log(GSPC)
retMDLZ = diff(lnMDLZ)
retGSPC = diff(lnGSPC)
retMDLZ = retMDLZ[-c(1),]
retGSPC = retGSPC[-c(1),]
plot(density(retGSPC))
#A
qMDLZ = quantile(retMDLZ, 0.05)
hist(retMDLZ, breaks=30)
abline(v=qMDLZ, col="blue", lwd=2)
plot(density(retMDLZ))
qGSPC = quantile(retGSPC, 0.05)
hist(retGSPC, breaks=30)
abline(v=qGSPC, col="blue", lwd=2)
plot(density(retGSPC))
#A# ARIMA(0,0,0)
MDLZarima = arima(retMDLZ, order=c(0,0,0))
MDLZcoef = MDLZarima$coef
MDLZsigma = sqrt(MDLZarima$sigma2)
varMDLZ = MDLZcoef - MDLZsigma * 1.96
GSPCarima = arima(retGSPC, order=c(0,0,0))
GSPCcoef = GSPCarima$coef
GSPCsigma = sqrt(GSPCarima$sigma2)
varGSPC = GSPCcoef - GSPCsigma * 1.96
print(fitGSPC)
#B# Best ARIMA models
fitMDLZ = auto.arima(retMDLZ)
print(fitMDLZ)
fitGSPC = auto.arima(retGSPC)
print(fitGSPC)
#B# Best ARIMA models
fitMDLZ = auto.arima(retMDLZ)
print(fitMDLZ)
fitGSPC = auto.arima(retGSPC)
print(fitGSPC)
fitMDLZ = arima(retMDLZ, order=c(1,0,0))
fitGSPC = arima(retGSPC, order=c(5,0,5))
meanMDLZ = retMDLZ - fitMDLZ$residuals
var_MDLZ_2 = meanMDLZ - sqrt(fitMDLZ$sigma2)*1.96
plot(var_MDLZ_2)
meanGSPC = retGSPC - fitGSPC$residuals
var_GSPC_2 = meanGSPC - sqrt(fitGSPC$sigma2)*1.96
plot(var_GSPC_2)
garchMDLZ <- ugarchspec(
variance.model = list(model="sGARCH", garchOrder=c(1,1)),
mean.model = list(armaOrder=c(1,0)),
distribution.model = "std"
)
install.packages("rugarch")
library(quantmod)
library(mFilter)
library(tseries)
library(lmtest)
library(forecast)
library(fGarch)
library(aTSA)
library(rugarch)
Sys.setenv(http_proxy = "http://10.246.170.130:3128")
Sys.setenv(https_proxy = "http://10.246.170.130:3128")
garchMDLZ <- ugarchspec(
variance.model = list(model="sGARCH", garchOrder=c(1,1)),
mean.model = list(armaOrder=c(1,0)),
distribution.model = "std"
)
garchFitMDLZ <- ugarchfit(spec = garchMDLZ, data = retMDLZ)
coef(garchFitMDLZ)
r_hatMDLZgarch <- garchFitMDLZ@fit$fitted.values
plot.ts(r_hatMDLZgarch)
vol_hatMDLZgarch <- ts(garchFitMDLZ@fit$sigma)
garchMDLZ <- ugarchspec(
variance.model = list(model="sGARCH", garchOrder=c(1,1)),
mean.model = list(armaOrder=c(1,0)),
distribution.model = "std"
)
garchFitMDLZ <- ugarchfit(spec = garchMDLZ, data = retMDLZ)
coef(garchFitMDLZ)
r_hatMDLZgarch <- garchFitMDLZ@fit$fitted.values
plot.ts(r_hatMDLZgarch)
vol_hatMDLZgarch <- ts(garchFitMDLZ@fit$sigma)
garchGSPC <- ugarchspec(
variance.model = list(model="sGARCH", garchOrder=c(1,1)),
mean.model = list(armaOrder=c(5,5)),
distribution.model = "std"
)
garchFitGSPC <- ugarchfit(spec = garchGSPC, data = retGSPC)
coef(garchFitGSPC)
r_hatGSPCgarch <- garchFitGSPC@fit$fitted.values
plot.ts(r_hatGSPCgarch)
vol_hatGSPCgarch <- ts(garchFitGSPC@fit$sigma)
plot.ts(vol_hatMDLZgarch)
plot.ts(vol_hatGSPCgarch)
#GARCH (1,1) volatility
GARCHvolMDLZ <- r_hatMDLZgarch-1.96*(vol_hatMDLZgarch)
GARCHvolGSPC <- r_hatGSPCgarch-1.96*(vol_hatGSPCgarch)
plot(GARCHvolMDLZ)
plot(GARCHvolGSPC)
---
title: "R Notebook"
output: html_notebook
---
# Time Series Econometrics, Assihnment n. 6
```{r, echo=FALSE}
library(quantmod)
library(mFilter)
library(tseries)
library(lmtest)
library(forecast)
library(fGarch)
library(aTSA)
library(rugarch)
library(quantmod)
library(mFilter)
library(tseries)
library(lmtest)
library(forecast)
library(fGarch)
library(aTSA)
library(rugarch)
Sys.setenv(http_proxy = "http://10.246.170.130:3128")
Sys.setenv(https_proxy = "http://10.246.170.130:3128")
At first, I download the data
```{r, echo=FALSE}
#GET DATA
getSymbols("MDLZ", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
getSymbols("^GSPC", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
#GET DATA
getSymbols("MDLZ", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
getSymbols("^GSPC", from = '2013-01-01', to = "2022-11-18",warnings = FALSE, auto.assign = TRUE)
MDLZ = MDLZ$MDLZ.Adjusted
GSPC = GSPC$GSPC.Adjusted
lnMDLZ = log(MDLZ)
lnGSPC = log(GSPC)
retMDLZ = diff(lnMDLZ)
retGSPC = diff(lnGSPC)
retMDLZ = retMDLZ[-c(1),]
retGSPC = retGSPC[-c(1),]
#A
qMDLZ = quantile(retMDLZ, 0.05)
hist(retMDLZ, breaks=30)
abline(v=qMDLZ, col="blue", lwd=2)
plot(density(retMDLZ))
qGSPC = quantile(retGSPC, 0.05)
hist(retGSPC, breaks=30)
abline(v=qGSPC, col="blue", lwd=2)
plot(density(retGSPC))
#A
qMDLZ = quantile(retMDLZ, 0.05)
hist(retMDLZ, breaks=30)
abline(v=qMDLZ, col="blue", lwd=2)
plot(density(retMDLZ))
qGSPC = quantile(retGSPC, 0.05)
hist(retGSPC, breaks=30)
abline(v=qGSPC, col="blue", lwd=2)
plot(density(retGSPC))
